// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace bookstore.Server.Data.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20251006143007_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("bookstore.Server.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Author_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Author_Name");

                    b.HasKey("AuthorId")
                        .HasName("PK__Author__55B9F6BF32DFCA59");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_Id");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Book_Name");

                    b.Property<string>("BookStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Book_Status");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Original_price");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int")
                        .HasColumnName("Page_number");

                    b.Property<DateOnly?>("PublishTime")
                        .HasColumnType("date")
                        .HasColumnName("Publish_Time");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("Publisher_Id");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Sale_price");

                    b.Property<int?>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Stock_Quantity");

                    b.HasKey("BookId")
                        .HasName("PK__Book__C223F3B46EA5BBAF");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Isbn" }, "UQ__Book__447D36EA3043CB21")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.BookImage", b =>
                {
                    b.Property<int>("BookImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookImage_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookImageId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<string>("BookImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("BookImage_Url");

                    b.Property<bool?>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Main");

                    b.HasKey("BookImageId")
                        .HasName("PK__BookImag__DE81FC42DDC26973");

                    b.HasIndex("BookId");

                    b.ToTable("BookImage", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__D6AB4759A50C15EB");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.CartDetail", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_Id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Total_amount");

                    b.HasKey("CartId", "BookId")
                        .HasName("PK__CartDeta__8A8978626C5FBE62");

                    b.HasIndex("BookId");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Category_Name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__6DB38D6EB3C9006C");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__Category__B35EB4194053120E")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Order", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Orders_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdersId"));

                    b.Property<string>("OrdersStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Orders_Status");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("OrdersId")
                        .HasName("PK__Orders__B2D3008CD2772431");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("bookstore.Server.Entities.OrdersDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Total_Price");

                    b.HasKey("OrderId", "BookId")
                        .HasName("PK__OrdersDe__ADC65F40144899D0");

                    b.HasIndex("BookId");

                    b.ToTable("OrdersDetail", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Method_Name");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__DA6C7FC190B29D8E");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Publisher_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Publisher_Name");

                    b.HasKey("PublisherId")
                        .HasName("PK__Publishe__F9F45A44F669CACA");

                    b.HasIndex(new[] { "PublisherName" }, "UQ__Publishe__D198AC377E8A0869")
                        .IsUnique();

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Role_Name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__D80AB4BBE82D9110");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__035DB7493D236212")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.HasKey("UserId")
                        .HasName("PK__User__206D917012DBFEDC");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D105345894DF28")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("bookstore.Server.Entities.Book", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Book__Author_Id__300424B4");

                    b.HasOne("bookstore.Server.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Book__Category_I__2E1BDC42");

                    b.HasOne("bookstore.Server.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK__Book__Publisher___2F10007B");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("bookstore.Server.Entities.BookImage", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__BookImage__Book___33D4B598");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Cart", b =>
                {
                    b.HasOne("bookstore.Server.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Cart__User_Id__3E52440B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookstore.Server.Entities.CartDetail", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Book", "Book")
                        .WithMany("CartDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__CartDetai__Book___4222D4EF");

                    b.HasOne("bookstore.Server.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CartDetai__Cart___412EB0B6");

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Order", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Orders__Payment___47DBAE45");

                    b.HasOne("bookstore.Server.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Orders__User_Id__46E78A0C");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookstore.Server.Entities.OrdersDetail", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Book", "Book")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__OrdersDet__Book___4CA06362");

                    b.HasOne("bookstore.Server.Entities.Order", "Order")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__OrdersDet__Order__4BAC3F29");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("bookstore.Server.Entities.User", b =>
                {
                    b.HasOne("bookstore.Server.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__Role_Id__3B75D760");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Book", b =>
                {
                    b.Navigation("BookImages");

                    b.Navigation("CartDetails");

                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Order", b =>
                {
                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("bookstore.Server.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("bookstore.Server.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
